## SSL Paths
ssl_certificate  '/etc/letsencrypt/live/settlescape.org/fullchain.pem';
ssl_certificate_key  '/etc/letsencrypt/live/settlescape.org/privkey.pem';
ssl_dhparam  '/etc/letsencrypt/ssl-dhparams.pem';

## SSL Encryption
ssl_prefer_server_ciphers  on;
ssl_ciphers  PROFILE=SYSTEM;
ssl_protocols  TLSv1.2 TLSv1.3;

## SSL Session
ssl_session_cache  shared:SSL:1m;
ssl_session_timeout  1d;
ssl_session_tickets  off; ## More-secure if disabled.

## Long-term HSTS doesn't make sense for us.
## We have 301 permanent redirects on all HTTP servers, which already indefinitely protects all future visits to a given HTTP address.
## Accordingly, the only benefits HSTS confers upon us is cross-domain and cross-subdomain protection.
## This is helpful for users who are dumb-enough to not VPN when on untrusted networks.
## However, HSTS also means that if something should go wrong with our SSL certs, users will not be able to choose to connect over HTTP.
## While that is actually a fantastic feature in certain use-cases, for ours it is actually a negative.
## We are securing no authentications and delivering nothing of tremendous significance.
## Accordingly, there is no risk to the server itself from not having SSL.
## However, there *is* risk to the server if something should go wrong with our SSL.
## To use HSTS is to commit to downtime commensurate with SSL cert issues.
## I would rather a circumnavigable warning were displayed instead. 
## Given our threat model and the 99% protection afforded by 301 permanent redirects,
## the only possible use-case I can fathom for HSTS is to prevent subsequent first-time port-80 connections on related domains and subdomains.
## And the longest length I can fathom for HSTS where the risks are worth that 1% is to set it to the longest time for which I am comfortable having a total service outage:  about 15 minutes at the most.
## But even a second of HSTS is enough to turn a partial service outage into a total outage, and I don't know that I'm comfortable with that.
## There's also the unknown implications of whether our server's resource pack will fail to serve in the event of an SSL outage.
## Should this happen, an SSL outage might even turn into a Minecraft server DoS, which would be unacceptable.
## More, there's the issue of our particular SSL setup being new and untested.
## We haven't even been through a renewal yet, and can't be certain that things are set-up correctly for than until we've been through one.
## I don't want HSTS to be like scheduling a DoS on ourselves.
## Accordingly, I am leaving this commented... for now.
# add_header  Strict-Transport-Security  'max-age=1000; includeSubDomains;';
